<!DOCTYPE html>
<html>
	<head>
		<title>Chainloadr Demo</title>
	</head>
	<body>
		<header>
			<h1>chainloadr</h1>
		</header>
		<!-- <script>
			// add .watch we need to polyfill this for chrome...

			(function addWinWatch () {
				/*
					Based on https://gist.github.com/eligrey/384583
				*/

				if (!window.watch) {
					Object.defineProperty(Object.getPrototypeOf(window), "watch", {
						"configurable": true,
						"enumerable": false,
						"writable": false,
						value (prop, handler) {
							let oldval, newval

							oldval = this[prop]
							newval = oldval

							function getter () {
								return newval
							}

							function setter (val) {
								oldval = newval
								newval = handler.call(this, prop, oldval, val)

								return newval
							}

							// can't watch constants
		//					if (delete this[prop]) {
								Object.defineProperty(this, prop, {
									"configurable": true,
									"enumerable": true,
									"get": getter,
									"set": setter
								})
		//					}
						}
					})
				}

				if (!window.unwatch) {
					Object.defineProperty(Object.getPrototypeOf(window), "unwatch", {
						"enumerable": false,
						"configurable": true,
						"writable": false,
						value (prop) {
							const val = this[prop]

							// remove accessors
							delete this[prop]
							this[prop] = val
						}
					})
				}
			}());
		</script> -->
		<script async src="bundle.js" data-chainloadr>
			chainloadr("jQuery, $ from unpkg::jquery; Vue from unpkg::vue").then((importedItems) => {
				console.log("importedItems", importedItems)
			})
		</script>
		<!-- <script async src="chainloadr.js" data-chainloadr>
			chainloadr("jQuery from jquery@3", (jq) => {
				console.log("jq", jq);
				console.log("$", $);
				console.log("jQuery", jQuery);
				console.log("window.$", window.$);
				console.log("window.jQuery", window.jQuery);
			});
		</script> -->
	</body>
</html>
